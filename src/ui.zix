const std = @import("std");
const SrcLoc = std.builtin.SourceLocation;

// white, light, dark, black
const Color = union(enum) {
    pub const transparent = Color{.indexed = 0};
    pub const white = Color{.indexed = 1};
    pub const light = Color{.indexed = 2};
    pub const dark = Color{.indexed = 3};
    pub const black = Color{.indexed = 4};

    indexed: u2,
    rgba: u32,
};

const ui = struct {
    const Instance = struct {

    };
    var ui_instance = ui{};

    fn window %( %.child: InlineComponent %) void { %:{
        ui.border(.{.border = 2, .border_color = Color.dark, .bg}, %[
            %.child.render();
        %]);
    }
    fn border %( %.opts: BorderOpts, %.child: InlineComponent %) void %{
        const constraints = ui.startBlock();

        ui.renderRect(%.opts);

        ui.registerBlockHander();
        %.child.render();

        ui.writeBlockSize(...)
    %}
    fn vLayout(child: InlineComponent) void {
    }
    fn button(action: []const u8, child: InlineComponent) void {

    }
    fn icon(image: Image, alt: []const u8) {
        const constraints = ui.startBlock();

        ui.renderImage(image, .{0, 0}, image.size);

        ui.writeBlockSize(image.size); // ignore bounds, write size
    }

    fn asyncImage(size: vec2, resource: []const u8) Image {

    }
};

const do = ui.do;

pub fn renderUI() void {
    ui.window(%{
        ui.vLayout(%{
            ui.v_layout_mode = .max_content;
            ui.button("draw.tool(cursor)", %{
                ui.icon(ui.asyncImage(.{16, 16}, "cursor.png"), "cursor");
            %});
            ui.button("draw.tool(paintbrush)", %{
                ui.icon(ui.asyncImage(.{16, 16}, "paintbrush.png"), "paintbrush");
            %});
        %});
    %});
}

// a button performs an action
// actions are also available in a cmd+shift+p menu
