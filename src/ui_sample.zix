// white, light, dark, black
const Color = union(enum) {
    pub const transparent = Color{.indexed = 0};
    pub const white = Color{.indexed = 1};
    pub const light = Color{.indexed = 2};
    pub const dark = Color{.indexed = 3};
    pub const black = Color{.indexed = 4};

    indexed: u2,
    rgba: u32,
};

const ui = struct {};
const Constraints = struct {
    w: ?i32,
    h: ?i32,
};

// startBlock, endBlock is odd. do we want it?


// fills the space provided to it
pub fn Rect %( %.color: Color, %.children: ui.Component %) !void %{
    const constraints = ui.startBlock();

    const child_render = %.child.render();

    ui.writeBlockSize(constraints);
%}

pub fn FillSpace %( %) !void %{
    const constraints = ui.startBlock();

    ui.writeBlockSize(.{
        constraints.w orelse 0,
        constraints.h orelse 0,
    });
%}

pub fn app %( %) void %{
    try Rect(Color.light, %[
        try FillSpace();
        // nothing yet
    %]);
%}
